import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# Параметры системы
L = 10.0  # Длина трубы
R = 1.0   # Радиус трубы
N_particles = 500  # Количество частиц
nu = 0.1  # Кинематическая вязкость
dt = 0.01  # Шаг по времени
pressure_gradient = -0.1  # Градиент давления
rho = 1.0  # Плотность жидкости

# Начальные условия
particles = np.zeros((N_particles, 3))  # [x, y, z]
velocities = np.zeros((N_particles, 3))  # [u_x, u_y, u_z]

# Равномерное распределение частиц внутри трубы
for i in range(N_particles):
    r = np.sqrt(np.random.uniform(0, R**2))
    theta = np.random.uniform(0, 2 * np.pi)
    particles[i] = [np.random.uniform(0, L), r * np.cos(theta), r * np.sin(theta)]

# Функция для обновления скорости и положения частиц
def update_particles(particles, velocities, dt, nu, pressure_gradient, rho):
    for i in range(N_particles):
        # Ускорение от градиента давления
        acceleration = np.array([pressure_gradient / rho, 0, 0])

        # Вязкость (упрощённая модель)
        velocities[i] += nu * np.random.normal(0, 1, 3) * dt

        # Обновление скорости
        velocities[i] += acceleration * dt

        # Обновление положения
        particles[i] += velocities[i] * dt

        # Граничные условия (отражение от стенок)
        r = np.sqrt(particles[i, 1]**2 + particles[i, 2]**2)
        if r >= R:
            normal = np.array([0, particles[i, 1], particles[i, 2]]) / r
            velocities[i] -= 2 * np.dot(velocities[i], normal) * normal

        if particles[i, 0] < 0 or particles[i, 0] > L:
            velocities[i, 0] *= -1

    return particles, velocities

# Функция для анимации
def animate(frame):
    global particles, velocities
    particles, velocities = update_particles(particles, velocities, dt, nu, pressure_gradient, rho)
    ax.clear()
    ax.set_xlim(0, L)
    ax.set_ylim(-R, R)
    ax.set_zlim(-R, R)
    ax.set_xlabel("Длина трубы (м)")
    ax.set_ylabel("Y (м)")
    ax.set_zlabel("Z (м)")
    ax.set_title(f"Поток жидкости в трубе (t = {frame * dt:.2f} с)")
    ax.scatter(particles[:, 0], particles[:, 1], particles[:, 2], c='b', s=10)
    return ax,

# Создаем 3D-график
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Анимация
ani = FuncAnimation(fig, animate, frames=200, interval=50, blit=False)

# Показываем анимацию
plt.show()
