import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# Параметры системы
L = 10.0  # Длина трубы
R = 1.0   # Радиус трубы
Nx = 50   # Количество точек по длине
Nr = 10   # Количество точек по радиусу
dx = L / Nx
dr = R / Nr
nu = 0.1  # Кинематическая вязкость
dt = 0.01  # Шаг по времени
rho = 1.0  # Плотность жидкости
pressure_gradient = -0.1  # Градиент давления

# Создаем сетку
x = np.linspace(0, L, Nx)
r = np.linspace(0, R, Nr)
X, R = np.meshgrid(x, r)

# Начальные условия
u = np.zeros((Nr, Nx))  # Скорость жидкости (осевая компонента)

# Функция для обновления скорости
def update_velocity(u, dt, dx, dr, nu, pressure_gradient):
    u_new = np.zeros_like(u)
    for i in range(1, Nr - 1):
        for j in range(1, Nx - 1):
            # Уравнение Навье-Стокса (упрощённое)
            u_new[i, j] = u[i, j] + dt * (
                nu * (
                    (u[i + 1, j] - 2 * u[i, j] + u[i - 1, j]) / dr**2 +
                    (u[i, j + 1] - 2 * u[i, j] + u[i, j - 1]) / dx**2
                ) -
                (1 / rho) * pressure_gradient
            )
    return u_new

# Функция для анимации
def animate(frame):
    global u
    u = update_velocity(u, dt, dx, dr, nu, pressure_gradient)
    ax.clear()
    ax.set_xlim(0, L)
    ax.set_ylim(0, R)
    ax.set_zlim(0, np.max(u))
    ax.set_xlabel("Длина трубы (м)")
    ax.set_ylabel("Радиус трубы (м)")
    ax.set_zlabel("Скорость (м/с)")
    ax.set_title(f"Поток жидкости в трубе (t = {frame * dt:.2f} с)")
    ax.plot_surface(X, R, u, cmap='viridis')
    return ax,

# Создаем 3D-график
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Анимация
ani = FuncAnimation(fig, animate, frames=200, interval=50, blit=False)

# Показываем анимацию
plt.show()
